// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SimpleIdentityServer.EF;
using SimpleIdentityServer.EF.Models;
using System;

namespace OpenIdMigration.Postgre.Migrations.SimpleIdServer
{
    [DbContext(typeof(SimpleIdentityServerContext))]
    partial class SimpleIdentityServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.Claim", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<bool>("IsIdentifier");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdateDateTime");

                    b.HasKey("Code");

                    b.ToTable("claims");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationType");

                    b.Property<string>("ClientName");

                    b.Property<string>("ClientUri");

                    b.Property<string>("Contacts");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("DefaultAcrValues");

                    b.Property<double>("DefaultMaxAge");

                    b.Property<string>("GrantTypes");

                    b.Property<string>("IdTokenEncryptedResponseAlg");

                    b.Property<string>("IdTokenEncryptedResponseEnc");

                    b.Property<string>("IdTokenSignedResponseAlg");

                    b.Property<string>("InitiateLoginUri");

                    b.Property<string>("JwksUri");

                    b.Property<string>("LogoUri");

                    b.Property<string>("PolicyUri");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("RedirectionUrls");

                    b.Property<string>("RequestObjectEncryptionAlg");

                    b.Property<string>("RequestObjectEncryptionEnc");

                    b.Property<string>("RequestObjectSigningAlg");

                    b.Property<string>("RequestUris");

                    b.Property<bool>("RequireAuthTime");

                    b.Property<bool>("RequirePkce");

                    b.Property<string>("ResponseTypes");

                    b.Property<bool>("ScimProfile");

                    b.Property<string>("SectorIdentifierUri");

                    b.Property<string>("SubjectType");

                    b.Property<int>("TokenEndPointAuthMethod");

                    b.Property<string>("TokenEndPointAuthSigningAlg");

                    b.Property<string>("TosUri");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<string>("UserInfoEncryptedResponseAlg");

                    b.Property<string>("UserInfoEncryptedResponseEnc");

                    b.Property<string>("UserInfoSignedResponseAlg");

                    b.HasKey("ClientId");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ClientScope", b =>
                {
                    b.Property<string>("ClientId");

                    b.Property<string>("ScopeName");

                    b.HasKey("ClientId", "ScopeName");

                    b.HasIndex("ScopeName");

                    b.ToTable("clientScopes");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ClientSecret", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<int>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecrets");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.Consent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<string>("ResourceOwnerId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ResourceOwnerId");

                    b.ToTable("consents");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ConsentClaim", b =>
                {
                    b.Property<string>("ConsentId");

                    b.Property<string>("ClaimCode");

                    b.HasKey("ConsentId", "ClaimCode");

                    b.HasIndex("ClaimCode");

                    b.ToTable("consentClaims");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ConsentScope", b =>
                {
                    b.Property<string>("ConsentId");

                    b.Property<string>("ScopeName");

                    b.HasKey("ConsentId", "ScopeName");

                    b.HasIndex("ScopeName");

                    b.ToTable("consentScopes");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.JsonWebKey", b =>
                {
                    b.Property<string>("Kid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Alg");

                    b.Property<string>("ClientId");

                    b.Property<string>("KeyOps");

                    b.Property<int>("Kty");

                    b.Property<string>("SerializedKey");

                    b.Property<int>("Use");

                    b.Property<string>("X5t");

                    b.Property<string>("X5tS256");

                    b.Property<string>("X5u");

                    b.HasKey("Kid");

                    b.HasIndex("ClientId");

                    b.ToTable("jsonWebKeys");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.Profile", b =>
                {
                    b.Property<string>("Subject")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Issuer");

                    b.Property<string>("ResourceOwnerId");

                    b.HasKey("Subject");

                    b.HasIndex("ResourceOwnerId");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ResourceOwner", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<bool>("IsLocalAccount");

                    b.Property<string>("Password");

                    b.Property<string>("TwoFactorAuthentication");

                    b.Property<DateTime>("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("resourceOwners");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ResourceOwnerClaim", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimCode");

                    b.Property<string>("ResourceOwnerId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClaimCode");

                    b.HasIndex("ResourceOwnerId");

                    b.ToTable("resourceOwnerClaims");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.Scope", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDisplayedInConsent");

                    b.Property<bool>("IsExposed");

                    b.Property<bool>("IsOpenIdScope");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateDateTime");

                    b.HasKey("Name");

                    b.ToTable("scopes");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ScopeClaim", b =>
                {
                    b.Property<string>("ClaimCode");

                    b.Property<string>("ScopeName");

                    b.HasKey("ClaimCode", "ScopeName");

                    b.HasIndex("ScopeName");

                    b.ToTable("scopeClaims");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.Translation", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(255);

                    b.Property<string>("LanguageTag");

                    b.Property<string>("Value");

                    b.HasKey("Code", "LanguageTag");

                    b.ToTable("translations");
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ClientScope", b =>
                {
                    b.HasOne("SimpleIdentityServer.EF.Models.Client", "Client")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleIdentityServer.EF.Models.Scope", "Scope")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ScopeName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ClientSecret", b =>
                {
                    b.HasOne("SimpleIdentityServer.EF.Models.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.Consent", b =>
                {
                    b.HasOne("SimpleIdentityServer.EF.Models.Client", "Client")
                        .WithMany("Consents")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleIdentityServer.EF.Models.ResourceOwner", "ResourceOwner")
                        .WithMany("Consents")
                        .HasForeignKey("ResourceOwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ConsentClaim", b =>
                {
                    b.HasOne("SimpleIdentityServer.EF.Models.Claim", "Claim")
                        .WithMany("ConsentClaims")
                        .HasForeignKey("ClaimCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleIdentityServer.EF.Models.Consent", "Consent")
                        .WithMany("ConsentClaims")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ConsentScope", b =>
                {
                    b.HasOne("SimpleIdentityServer.EF.Models.Consent", "Consent")
                        .WithMany("ConsentScopes")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleIdentityServer.EF.Models.Scope", "Scope")
                        .WithMany("ConsentScopes")
                        .HasForeignKey("ScopeName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.JsonWebKey", b =>
                {
                    b.HasOne("SimpleIdentityServer.EF.Models.Client", "Client")
                        .WithMany("JsonWebKeys")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.Profile", b =>
                {
                    b.HasOne("SimpleIdentityServer.EF.Models.ResourceOwner", "ResourceOwner")
                        .WithMany("Profiles")
                        .HasForeignKey("ResourceOwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ResourceOwnerClaim", b =>
                {
                    b.HasOne("SimpleIdentityServer.EF.Models.Claim", "Claim")
                        .WithMany("ResourceOwnerClaims")
                        .HasForeignKey("ClaimCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleIdentityServer.EF.Models.ResourceOwner", "ResourceOwner")
                        .WithMany("Claims")
                        .HasForeignKey("ResourceOwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdentityServer.EF.Models.ScopeClaim", b =>
                {
                    b.HasOne("SimpleIdentityServer.EF.Models.Claim", "Claim")
                        .WithMany("ScopeClaims")
                        .HasForeignKey("ClaimCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleIdentityServer.EF.Models.Scope", "Scope")
                        .WithMany("ScopeClaims")
                        .HasForeignKey("ScopeName")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
